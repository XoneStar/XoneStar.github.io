{"meta":{"title":"XoneStar's Bolg","subtitle":null,"description":null,"author":"XoneStar(jxz)","url":"http://XoneStar.github.io"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2018-08-04T08:16:35.333Z","updated":"2018-08-04T08:16:35.333Z","comments":false,"path":"/404.html","permalink":"http://XoneStar.github.io//404.html","excerpt":"","text":""},{"title":"关于","date":"2018-08-04T08:16:35.338Z","updated":"2018-08-04T08:16:35.338Z","comments":false,"path":"about/index.html","permalink":"http://XoneStar.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"分类","date":"2018-08-04T08:16:35.341Z","updated":"2018-08-04T08:16:35.341Z","comments":false,"path":"categories/index.html","permalink":"http://XoneStar.github.io/categories/index.html","excerpt":"","text":""},{"title":"书单","date":"2018-08-04T08:16:35.338Z","updated":"2018-08-04T08:16:35.338Z","comments":false,"path":"books/index.html","permalink":"http://XoneStar.github.io/books/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2018-08-04T08:16:35.344Z","updated":"2018-08-04T08:16:35.344Z","comments":false,"path":"repository/index.html","permalink":"http://XoneStar.github.io/repository/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2018-08-04T08:16:35.341Z","updated":"2018-08-04T08:16:35.341Z","comments":true,"path":"links/index.html","permalink":"http://XoneStar.github.io/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-08-04T08:16:35.345Z","updated":"2018-08-04T08:16:35.345Z","comments":false,"path":"tags/index.html","permalink":"http://XoneStar.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Navicat Premium 12 破解教程","slug":"Navicat Premium 12 破解","date":"2018-08-04T15:06:04.197Z","updated":"2018-08-05T10:32:10.258Z","comments":true,"path":"2018/08/04/Navicat Premium 12 破解/","link":"","permalink":"http://XoneStar.github.io/2018/08/04/Navicat Premium 12 破解/","excerpt":"","text":"Navicat Premium 12下载安装下载地址：https://www.navicat.com.cn/download/navicat-premium 破解工具下载下载地址：https://github.com/DoubleLabyrinth/navicat-keygen/releases 解压后，cmd命令行进入工具目录，执行命令 1&gt; navicat-patcher \"D:\\Program Files\\PremiumSoft\\Navicat Premium 12\" RegPrivateKey.pem 注：命令的参数是Navicat Premium 12的安装目录。若为powershell请在命令最前面加.\\ 然后执行命令 1&gt; navicat-keygen.exe RegPrivateKey.pem 输入了Your organization项后回车后暂时停止输入，打开安装好的Navicat Premium 12，然后断开所有网络连接，点击帮助 &gt; 注册，然后将工具生成的密钥SnKey的值输入注册弹窗的键那一项，再点激活。 然后弹窗再点击手动激活 再将手动激活弹窗的请求码输入工具运行待输入项的位置 最后将工具生成的注册码输入手动激活弹窗的激活码一栏，点击激活即可完成破解了。 友情提示：navicat-keygen 激活需要适配Navicat Premium的版本，不同的版本无法激活。激活后也不要升级更新，升级更新后将不再是激活状态，需要重新激活。新版本激活需要等到破解工具作者出了新的破解工具才能激活。","categories":[{"name":"hacker","slug":"hacker","permalink":"http://XoneStar.github.io/categories/hacker/"}],"tags":[{"name":"破解工具","slug":"破解工具","permalink":"http://XoneStar.github.io/tags/破解工具/"},{"name":"Navicat Premium","slug":"Navicat-Premium","permalink":"http://XoneStar.github.io/tags/Navicat-Premium/"}]},{"title":"Python 作用域","slug":"Python Learning","date":"2018-08-04T15:06:04.197Z","updated":"2018-08-05T10:32:12.363Z","comments":true,"path":"2018/08/04/Python Learning/","link":"","permalink":"http://XoneStar.github.io/2018/08/04/Python Learning/","excerpt":"","text":"块级作用域（python中没有块级作用域，代码块里的变量，外部可以调用 ） 1234567for i in range(0, 10): age = iprint(age)### 运行结果 ###9### 运行结果 ### 局部作用域（python 函数内的变量，无法在外部进行调用） 1234567def func(): name = \"python\"print(name)### 运行结果 ###NameError: name 'name' is not defined### 运行结果 ### 作用域链(Python中有作用域链，变量会由内到外找) 123456789101112name = \"C\"def f1(): name = \"JAVA\" def f2(): name = \"python\" print(name) f2()f1()### 运行结果 ###python### 运行结果 ### 综合例子 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354### 例子1name = \"C\"def f1(): print(name) def f2(): name = \"Python\" # 函数的局部变量不影响外部变量的值 f1() f2()### 运行结果 ###C### 运行结果 ###### 例子2name = \"C\"def f1(): print(name) def f2(): global name # 函数的局部变量加global修饰符，表示全局变量，修改值就会影响外部变量的值 name = \"Python\" f1() f2()### 运行结果 ###Python### 运行结果 ###### 例子3li = [lambda: x for x in range(0,10)]print(type(li))print(type(li[0]))### 运行结果 ###&lt;class 'list'&gt;&lt;class 'function'&gt;### 运行结果 ###解析：li 是一个函数列表，列表中的每一项都是一个函数li = [lambda: x for x in range(0,10)]相当于：for x in range(10): def func(): return x li.append(func)经过循环，x的值为9，列表中的每一个函数都是def func(): return x所以列表中每一个函数返回的都是9.","categories":[{"name":"Python","slug":"Python","permalink":"http://XoneStar.github.io/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://XoneStar.github.io/tags/Python/"},{"name":"变量作用域","slug":"变量作用域","permalink":"http://XoneStar.github.io/tags/变量作用域/"}]},{"title":"inet_ntoa 使用注意事项","slug":"inet_ntoa 使用注意事项","date":"2018-08-04T15:06:04.138Z","updated":"2018-08-05T10:32:08.258Z","comments":true,"path":"2018/08/04/inet_ntoa 使用注意事项/","link":"","permalink":"http://XoneStar.github.io/2018/08/04/inet_ntoa 使用注意事项/","excerpt":"","text":"这是一个在解析IP协议的一个场景下的遇到的问题 123456789101112131415char *ip_src_str = inet_ntoa(ip-&gt;ip_src);char *ip_dst_str = inet_ntoa(ip-&gt;ip_dst);snprintf(ip_port, sizeof(ip_port), \"\\\"remote_addr\\\":\\\"%s\\\",\\\"target_addr\\\":\\\"%s\\\",\", ip_src_str, ip_dst_str); // 此处打印的IP地址是一样的都为ip_dst_str。/*inet_ntoa返回一个char *,而这个char *的空间是在inet_ntoa里面静态分配的，所以inet_ntoa后面的调用会覆盖上一次的调用。所以两次取值是取到最后一次的值。解决方案，将每次取到的值进行赋值备份。*/char ip_src_str[16];snprintf(ip_src_str, sizeof(ip_src_str), \"%s\", inet_ntoa(ip-&gt;ip_src));char ip_dst_str[16];snprintf(ip_dst_str, sizeof(ip_dst_str), \"%s\", inet_ntoa(ip-&gt;ip_dst));snprintf(ip_port, sizeof(ip_port), \"\\\"remote_addr\\\":\\\"%s\\\",\\\"target_addr\\\":\\\"%s\\\",\", ip_src_str, ip_dst_str);","categories":[{"name":"C","slug":"C","permalink":"http://XoneStar.github.io/categories/C/"}],"tags":[{"name":"C","slug":"C","permalink":"http://XoneStar.github.io/tags/C/"},{"name":"inet_ntoa","slug":"inet-ntoa","permalink":"http://XoneStar.github.io/tags/inet-ntoa/"}]}]}